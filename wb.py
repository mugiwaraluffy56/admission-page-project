#puneeths first ml algo

#libraries
import numpy as np
import matplotlib.pyplot as plt

#data set
points = [
    (1041, 143.24), (2245, 336.02), (3817, 573.91), (2273, 344.88), (3799, 574.89),
    (713, 108.51),  (3126, 466.91), (3226, 483.61), (2030, 322.57), (2303, 345.96),
    (2833, 425.57), (2243, 336.79), (1843, 272.51), (2718, 409.49), (2657, 402.02),
    (3241, 487.75), (535, 87.03),   (2321, 346.15), (2367, 356.62), (1453, 217.96),
    (3271, 488.45), (2286, 340.67), (3289, 489.99), (2755, 414.71), (1747, 258.62),
    (1752, 260.05), (3883, 577.09), (523, 81.09),   (1918, 287.35), (1579, 234.21),
    (1214, 186.34), (2520, 380.87), (2001, 316.04), (3720, 558.68), (1387, 203.18),
    (1050, 155.04), (1675, 261.89), (2748, 415.88), (2496, 379.94), (1315, 200.41),
    (2558, 381.64), (2074, 323.11), (3261, 488.96), (3856, 568.87), (1213, 184.53),
    (2948, 437.79), (3379, 506.82), (3670, 548.53), (1212, 180.88), (2454, 369.64),
    (1286, 195.62), (3173, 478.16), (1192, 176.53), (1557, 231.99), (1317, 200.57),
    (3815, 575.24), (565, 89.14),   (1896, 288.39), (1831, 267.09), (1554, 233.14),
    (1197, 182.96), (1378, 206.01), (1870, 287.94), (3562, 530.79), (2621, 396.02),
    (3047, 454.54), (3245, 491.29), (2990, 437.99), (2373, 355.53), (3372, 502.18),
    (2825, 419.88), (1592, 236.43), (2135, 321.53), (1318, 202.14), (2078, 324.01),
    (3324, 488.34), (1542, 228.57), (2796, 414.42), (3237, 486.42), (2847, 429.67),
    (2340, 354.25), (2554, 381.22), (3622, 544.04), (2307, 347.88), (3229, 487.19),
    (2106, 317.57), (3151, 475.43), (3302, 493.67), (2477, 373.84), (3600, 538.94),
    (1015, 149.31), (1487, 222.54), (3147, 476.04), (3263, 488.37), (1149, 176.57),
    (3619, 541.36), (3343, 505.38), (1494, 223.76), (1982, 303.39), (1987, 303.57),
    (2095, 323.12), (2517, 377.79), (3152, 478.21), (2797, 412.59), (1578, 230.77),
    (3052, 455.52), (3767, 565.01), (2038, 320.32), (2757, 417.52), (3068, 458.34),
    (3620, 538.94), (1955, 294.11), (1360, 198.07), (1382, 202.03), (3249, 489.15),
    (1651, 249.79), (2023, 317.53), (2478, 374.92), (2310, 351.97), (2764, 418.94),
    (2833, 421.89), (2591, 390.41), (1619, 241.72), (3435, 512.83), (2960, 438.09),
    (2113, 323.29), (1128, 171.19), (2968, 440.11), (2715, 408.01), (2209, 331.76),
    (1907, 284.54), (3111, 466.19), (1427, 213.68), (2194, 329.47), (3564, 532.48),
    (2513, 376.38), (2719, 410.16), (2576, 383.18), (2441, 371.74), (1672, 250.69),
    (3017, 449.33), (1160, 175.67), (1184, 179.24), (2407, 367.85), (3227, 487.14),
    (1261, 191.43), (3104, 469.07), (1675, 254.77), (2816, 422.58), (1985, 304.44),
    (1144, 174.58), (1635, 242.64), (3308, 494.98), (2328, 353.87), (1153, 173.95),
    (1862, 281.84), (2061, 319.64), (2022, 313.81), (2006, 309.13), (1608, 238.57),
    (3280, 486.91), (1193, 181.86), (1760, 262.21), (3073, 458.91), (2622, 395.38),
    (3035, 454.12), (2389, 354.74), (2139, 320.74), (1497, 224.83), (3351, 504.23),
    (2377, 356.36), (2860, 432.31), (1218, 183.73), (1987, 299.58), (2374, 356.94),
    (1915, 288.24), (2774, 416.64), (1555, 234.03), (2968, 439.52), (1750, 258.36),
    (1460, 219.69), (1231, 186.14), (2047, 317.39), (2493, 378.53), (3320, 491.79),
    (3311, 495.18), (3099, 464.53), (1260, 191.29), (2012, 309.32), (2826, 422.44),
    (2624, 397.12), (2244, 336.26), (1217, 186.77), (3381, 508.87), (3328, 492.66),
    (3316, 497.39), (1294, 197.64), (1745, 257.17), (1572, 236.51), (1956, 296.68),
    (1660, 244.83), (1990, 309.62), (1276, 193.65), (1936, 289.48), (1677, 252.35),
    (2390, 369.41), (1515, 226.53), (3080, 460.53), (3193, 475.59), (1186, 180.89),
    (1245, 187.72), (2529, 384.49), (3007, 446.72), (2475, 373.24), (1568, 232.19),
    (2961, 439.93), (1531, 228.83), (3295, 485.17), (2449, 373.91), (1931, 289.24),
    (1443, 215.37), (2083, 319.89), (1867, 280.88), (1977, 299.22), (2896, 433.67),
    (3463, 514.92), (3038, 454.02), (2992, 440.97), (2452, 373.29), (1494, 222.53),
    (2932, 437.45), (1951, 292.91), (3170, 479.11), (2769, 417.66), (2133, 324.38),
    (2681, 398.79), (3242, 485.01), (1973, 304.82), (2283, 342.37), (2147, 319.91),
    (1615, 241.29), (1780, 263.99), (3382, 507.37), (1962, 295.16), (2702, 407.02),
    (1677, 251.22), (3273, 487.63), (1741, 254.94), (1843, 278.81), (2179, 326.72),
    (2113, 314.48), (2451, 371.15), (1269, 195.25), (3280, 493.12), (1937, 291.48),
    (1710, 257.18), (2496, 377.74), (2120, 320.56), (3294, 488.77), (2436, 369.46),
    (2380, 361.58), (2017, 309.82), (2850, 423.14), (2512, 377.31), (1749, 256.94),
    (1784, 268.18), (3177, 477.14), (2473, 375.74), (1633, 241.12), (1579, 234.18),
    (2308, 354.21), (2205, 329.54), (2601, 394.67), (1657, 246.43), (3124, 473.32),
    (3016, 453.56), (1650, 249.57), (3268, 485.39), (1850, 286.55), (2134, 321.03),
    (2202, 333.17), (2320, 354.51), (2043, 316.12), (3150, 475.48), (1946, 288.69),
    (2843, 424.52), (2667, 408.35),
]

#main funcn (which calcs the cost funcn)
def slopes(area , points):
    n = len(points)
    points.sort()

    #slopes
    os,cs,ones = [],[],[]
    for x, y in points:
        if x == 0 :
            os.append(0)
        else:
            os.append(y/x)
    for i in range(1,n):
        x1 = points[i][0] - points[i-1][0]
        y1 = points[i][1] - points[i-1][1]
        x2 = points[i][0] - points[0][0]
        y2 = points[i][1] - points[0][1]
        if x1 == 0 :
            cs.append(0)
        else:
            cs.append(y1/x1)
        if x2 == 0 :
            ones.append(0)
        else:
            ones.append(y2/x2)
    avgcs,avgones,avgos = sum(cs)/n,sum(ones)/n,sum(os)/n
    m1,m2,m3,m4 = (avgos+avgones)/2,(avgos+avgcs)/2,(avgcs+avgones)/2,(avgcs+avgos+avgones)/3
    m = [m1,m2,m3,m4]
    mj1,mj2,mj3,mj4 = [],[],[],[]

    #mean square
    e = []
    for k in m:
        for j in range(1,n):
            cj = (points[j][0]*k - points[j][1])**2
            if k == m1:
                mj1.append(cj)
            elif k == m2:
                mj2.append(cj)
            elif k == m3:
                mj3.append(cj)
            elif k == m4:
                mj4.append(cj)
    e.append([sum(mj1)/(2*n) , m1]),e.append([sum(mj2)/2*n , m2]),e.append([sum(mj3)/2*n , m3]),e.append([sum(mj4)/2*n , m4])
    e.sort()
    ans = e[0][1]*area
    return ans

#graph plot
def plot_regression_line(points):
    x_vals = [x for x, _ in points]
    y_vals = [y for _, y in points]
    slope = slopes(1, points)
    regression_line = [slope * x for x in x_vals]
    plt.figure(figsize=(8, 6))
    plt.scatter(x_vals, y_vals, color='blue', label='Data points',alpha=0.4) #alpha="0.4"
    plt.plot(x_vals, regression_line, color='red', label=f'Regression line (y = {slope:.2f}x)')
    plt.title("Linear Regression: y = mx\n(puneeth's first ml algo)")
    plt.xlabel("area in sqft")
    plt.ylabel("price in 1000$")
    plt.axhline(0, color='black', linewidth=0.5)
    plt.axvline(0, color='black', linewidth=0.5)
    plt.gca().set_aspect(5.1)
    plt.grid(True)
    plt.legend()
    plt.show()

#final result
area = float(input('Enter num: '))
predicted_value = slopes(area, points)
plot_regression_line(points)
print(f"Predicted value for area {area} : {round(predicted_value,4)}")

# #points which are not in data set
new_points = [
    (1041, 143.24), (2245, 336.02), (3817, 573.91), (2273, 344.88), (3799, 574.89),
    (713, 108.51), (3126, 466.91), (3226, 483.61), (2030, 322.57), (2303, 345.96),
    (2833, 425.57), (2243, 336.79), (1843, 272.51), (2718, 409.49), (2657, 402.02),
    (3241, 487.75), (535, 87.03), (2321, 346.15), (2367, 356.62), (1453, 217.96),
    (3271, 488.45), (2286, 340.67), (3289, 489.99), (2755, 414.71), (1747, 258.62),
    (1752, 260.05), (3883, 577.09), (523, 81.09), (1918, 287.35), (1579, 234.21),
    (1214, 186.34), (2520, 380.87), (2001, 316.04), (3720, 558.68), (1387, 203.18),
    (1050, 155.04), (1675, 261.89), (2748, 415.88), (2496, 379.94), (1315, 200.41),
    (2558, 381.64), (2074, 323.11), (3261, 488.96), (3856, 568.87), (1213, 184.53),
    (2948, 437.79), (3379, 506.82), (3670, 548.53), (1212, 180.88), (2454, 369.64),
    (1286, 195.62), (3173, 478.16), (1192, 176.53), (1557, 231.99), (1317, 200.57),
    (3815, 575.24), (565, 89.14), (1896, 288.39), (1831, 267.09), (1554, 233.14),
    (1197, 182.96), (1378, 206.01), (1870, 287.94), (3562, 530.79), (2621, 396.02),
    (3047, 454.54), (3245, 491.29), (2990, 437.99), (2373, 355.53), (3372, 502.18),
    (2825, 419.88), (1592, 236.43), (2135, 321.53), (1318, 202.14), (2078, 324.01),
    (3324, 488.34), (1542, 228.57), (2796, 414.42), (3237, 486.42), (2847, 429.67),
    (2340, 354.25), (2554, 381.22), (3622, 544.04), (2307, 347.88), (3229, 487.19),
    (2106, 317.57), (3151, 475.43), (3302, 493.67), (2477, 373.84), (3600, 538.94),
    (1015, 149.31), (1487, 222.54), (3147, 476.04), (3263, 488.37), (1149, 176.57),
    (3619, 541.36), (3343, 505.38), (1494, 223.76), (1982, 303.39), (1987, 303.57),
    (2095, 323.12), (2517, 377.79), (3152, 478.21), (2797, 412.59), (1578, 230.77),
    (3052, 455.52), (3767, 565.01), (2038, 320.32), (2757, 417.52), (3068, 458.34),
    (3620, 538.94), (1955, 294.11), (1360, 198.07), (1382, 202.03), (3249, 489.15),
    (1651, 249.79), (2023, 317.53), (2478, 374.92), (2310, 351.97), (2764, 418.94),
    (2833, 421.89), (2591, 390.41), (1619, 241.72), (3435, 512.83), (2960, 438.09),
    (2113, 323.29), (1128, 171.19), (2968, 440.11), (2715, 408.01), (2209, 331.76),
    (1907, 284.54), (3111, 466.19), (1427, 213.68), (2194, 329.47), (3564, 532.48),
    (2513, 376.38), (2719, 410.16), (2576, 383.18), (2441, 371.74), (1672, 250.69),
    (3017, 449.33), (1160, 175.67), (1184, 179.24), (2407, 367.85), (3227, 487.14),
    (1261, 191.43), (3104, 469.07), (1675, 254.77), (2816, 422.58), (1985, 304.44),
    (1144, 174.58), (1635, 242.64), (3308, 494.98), (2328, 353.87), (1153, 173.95),
    (1862, 281.84), (2061, 319.64), (2022, 313.81), (2006, 309.13), (1608, 238.57),
    (3280, 486.91), (1193, 181.86), (1760, 262.21), (3073, 458.91), (2622, 395.38),
    (3035, 454.12), (2389, 354.74), (2139, 320.74), (1497, 224.83), (3351, 504.23),
    (2377, 356.36), (2860, 432.31), (1218, 183.73), (1987, 299.58), (2374, 356.94),
    (1915, 288.24), (2774, 416.64), (1555, 234.03), (2968, 439.52), (1750, 258.36),
    (1460, 219.69), (1231, 186.14), (2047, 317.39), (2493, 378.53), (3320, 491.79),
    (3311, 495.18), (3099, 464.53), (1260, 191.29), (2012, 309.32), (2826, 422.44),
    (2624, 397.12), (2244, 336.26), (1217, 186.77), (3381, 508.87), (3328, 492.66),
    (3316, 497.39), (1294, 197.64), (1745, 257.17), (1572, 236.51), (1956, 296.68),
    (1660, 244.83), (1990, 309.62), (1276, 193.65), (1936, 289.48), (1677, 252.35),
    (2390, 369.41), (1515, 226.53), (3080, 460.53), (3193, 475.59), (1186, 180.89),
    (1245, 187.72), (2529, 384.49), (3007, 446.72), (2475, 373.24), (1568, 232.19),
    (2961, 439.93), (1531, 228.83), (3295, 485.17), (2449, 373.91), (1931, 289.24),
    (1443, 215.37), (2083, 319.89), (1867, 280.88), (1977, 299.22), (2896, 433.67),
    (3463, 514.92), (3038, 454.02), (2992, 440.97), (2452, 373.29), (1494, 222.53),
    (2932, 437.45), (1951, 292.91), (3170, 479.11), (2769, 417.66), (2133, 324.38),
    (2681, 398.79), (3242, 485.01), (1973, 304.82), (2283, 342.37), (2147, 319.91),
    (1615, 241.29), (1780, 263.99), (3382, 507.37), (1962, 295.16), (2702, 407.02),
    (1677, 251.22), (3273, 487.63), (1741, 254.94), (1843, 278.81), (2179, 326.72),
    (2113, 314.48), (2451, 371.15), (1269, 195.25), (3280, 493.12), (1937, 291.48),
    (1710, 257.18), (2496, 377.74), (2120, 320.56), (3294, 488.77), (2436, 369.46),
    (2380, 361.58), (2017, 309.82), (2850, 423.14), (2512, 377.31), (1749, 256.94),
    (1784, 268.18), (3177, 477.14), (2473, 375.74), (1633, 241.12), (1579, 234.18),
    (2308, 354.21), (2205, 329.54), (2601, 394.67), (1657, 246.43), (3124, 473.32),
    (3016, 453.56), (1650, 249.57), (3268, 485.39), (1850, 286.55), (2134, 321.03),
    (2202, 333.17), (2320, 354.51), (2043, 316.12), (3150, 475.48), (1946, 288.69),
    (2843, 424.52), (2667, 408.35),
]

ex = [abs(slopes(new_points[i][0],points)-new_points[i][1])/new_points[i][1] for i in range(len(new_points)) ]

#calcs the error and accuracy
print('accuracy : ',round((1 - sum(ex)/len(ex)) * 100, 4),'%')
print('error : ',round(sum(ex)/len(ex) * 100, 4),'%')
